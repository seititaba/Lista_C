Para todos os problemas abaixo, usar a biblioteca de thread Posix
quando necessário.

--------------------------------------------------------------------
1) A execução de três processos são descritos abaixo:

Processo 1		Processo 2		Processo 3		Tempo

P(s1)			P(s2)			P(s3)			  |
P(s1)			"região			P(s3)			  |
P(s1)			crítica 2"		P(s3)			  |
"região			V(s3)			"região			  |
crítica 1"		V(s1)			crítica 3"		  |
V(s2)							V(s2)			  |
								V(s2)			  V
								
Considerando que os processos executam as instrucões acima
em um loop infinito (cada um), diga qual a sequência de execucão
de tais processos para o seguinte conjunto de valores iniciais
para os semáforos (se houver dealock, mostra em qual instante):

Semáforo	item a)		item b)		item c)		item d)
	s1			2			3			2			0
	s2			0			0			1			0
	s3			2			2			1			3
	
Faca um programa no qual cada processo é representado por uma thread
e a região crítica de cada um deles é mostrar na tela (stdout) qual thread é
executada no momento. Para cada operacão "P" e "V", incluir
também uma escrita na tela (stdout) para, quando se testar os itens a, b, c e d, seja possível detectar algum deadlock também no código em C.
Nessa implementação, utilize o seguinte DEFINE para que as threads executem um  número mínimo de vezes (ou seja, não executem infinitamente):

#define MIN_EXEC 6

Faça a análise do resultado obtido.

--------------------------------------------------------------------

2) Um engenheiro foi encarregado de fazer a portabilidade entre
dois sistemas. Para tal, ele precisa que dois processos (A e B) acessem
uma estrutura de dados que representa uma fila de operacoes comum entre
os dois sistemas. Enquanto um processo escreve nessa estrutura, um outro
deve ler as instrucoes. Esse sequenciamento é necessário pois o processo A
somente escreve o conteudo na lista, enquanto que o processo leitor tem que 
validá-los, ou seja, é mais lento. A estrutura da fila é da seguinte forma:

struct asm_operations
{
	int pos;
	char *asm_ops[NUM_OPS];
};

NUM_OPS é o número de operacoes em comum suportadas pelos dois sistemas. E "pos"
é a posicao atual em asm_ops para leitura/escrita das instrucoes em comum.
A sequência de instrucoes (total) é dada abaixo:

MOV, PUSH, POP, IN, OUT, ADD, SUB, DIV, MUL, DEC,
INC, CMP, NOT, AND, OR, XOR, CALL, JMP, JE, JZ.

Quando é preciso fazer a portabilidade, basta dizer a quantidade de instrucoes
em comum entre dois sistemas, por exemplo, se NUM_OPS é 5, os dois sistemas só
tem em comum as instrucoes MOV, PUSH, POP, IN e OUT. O processo A deve escrever
essas 5 instrucoes nessa sequencia, enquanto que o processo B deve ler as
instrucoes escritas e verficar se elas realmente pertencem ao conjunto de
instrucoes da lista total. Essa validacao é necessária para garantir
que os dados nao foram corrompidos durante a escrita.

2.a) Insira operacoes com semaforos no diagrama abaixo que garantam
um acesso a estrutura de operacoes de forma exclusiva (atômica) por
cada um dos processos de leitura e escrita. Qual o nome desse tipo
de sincronizacao?

  A		  B		Tempo
  |		  |		  |
  |		  |		  |
WRITE	READ	  |
  |		  |		  |
  |		  |		  V
  
2.b) Melhore a solucao do item 2.a) com novas operacoes de semaforo
de tal forma que o processo leitor soh possa fazer um numero de
leituras correspondente ao numero de escritas feitas pelo outro processo.
Ou seja, se A escreve 2 vezes na estrutura, B só pode ler duas vezes.

2.c) Implemente codigo em C com threads para a solucao do item 2.a e 2.b.
Para cada operacao de leitura/escrita algo deve ser escrito na tela (stdout).

Utilize um define para determinar o número de instruções em comum entre 
os sistemas (as threads devem executar o tempo necessário pra fazer
a portabilidade):
#define SHARED_INST 5


3. Implemente um código em C que escalone 6 tarefas usando a política de
escalonamento FIFO. Tanto as tarefas quanto o processo pai delas devem
compatilhar uma variável global da seguinte estrutura:
struct sequence {
	int accesses;
	char msgSequence[1024];
};

"accesses" deve ser inicializado com zero. A cada acesso feito por uma
thread, "accesses" deve ser incrementado em 1 e a mensagem da thread acessando a
estrutura deve ser anexada ao fim de "msgSequence".
A mensagem de todas as threads deve ser da seguinte forma:
"|Thread X with priorty Y running|", na qual X deve ser substituído pela ID
da thread e Y pela prioridade da mesma.
Para cada item abaixo, gerar um "printscreen" da sequência de execução das
threads mostrada com a ferramenta "eztrace" e "vite".
Além disso, ao término de todas as threads, o processo pai deve imprimir
o conteúdo (todos os campos) da variável global da estrutura "sequence".

a) 	É necessário o uso de mutex/semáforo para que a variável global da estrutura
	seja acessada tanto pelo processo pai quanto pelas threads de forma
	ordenada? Justifique.
a)	Implmente o código acima com as threads tendo prioridades iguais.
b)	Implemente o código acima com as threads tendo prioridades diferentes. 

--------------------------------------------------------------------

4. Quatro processos são responsáveis pela criptografia de um conteúdo. Eles 
possuem a seguinte configuracão:
-> comando A, comando B, comando C
-> expedidor
Os comandos A, B e C devem criptografar o conteudo com seus respectivos
algoritmos e o processo expedidor serve para fazer a sequencia da
aplicacao dos algoritmos.
Esses processos devem seguir a seguinte sequencia:
-> o expedidor deve ser executado antes de cada comando A, B ou C
-> a sequencia dos comandos A, B e C deve seguir a ordem alfabética de execucao
-> a sequencia acima deve se repetir infinitamente de forma cíclica.

3.a) Escreva a ordem da sequencia desejada para a execucao dos processos.
3.b) Insira operacoes de semáforo para garantir a ordem desejada
3.c) Com quais valores os semaforos devem ser inicializados?

Nessa questão não precisa implementação em C.

-------------------------------------------------------------------]

5. O item 4 anterior serve de base para o problema abaixo, embora os
seguintes processos não tenham que ficar executando infinitamente
de forma cíclica.

Um protocolo simples de criptografia se utiliza de 3 processos (threads)
responsáveis por pegar uma mensagem de texto de um arquivo e criptografá-la.
O problema se divide em duas partes: processo em "user mode" e em "kernel mode". 

Em "user mode", um processo X deve ler um arquivo "cripto.txt" que possui os
comandos de criptografia. Com base em cada comando o processo X deve chamar
um processo Y ou Z para que eles montem uma requisicao para um módulo do kernel
(que fica em "kernel mode"). Após a requisicao ser escrita no módulo
(mensagem antes do comando + comando), este último deve "decodificar" o comando
e escrever na sua saída o resultado da requisicao. Com o resultado do módulo
salvo na memória, o processo X pode ler o próximo comando e invocar o próximo
processo responsável (Y ou Z). A criptografia deve terminar com o processo X
salvando o resultado em um arquivo "rslt.txt", ou seja, somente após todos
os resultados serem escritos na memória, eles podem ser escritos no arquivo.
O arquivo com a mensagem original deve se chamar "orig_msg.txt".
Os 3 processos tem a seguinte sequência:

Atividades de X:
	1) salvar próximo comando de cripto e mensagem inicial (original) para a
	memória ou (de forma exclusiva) escrever resultado em rslt, requisitar
	limpeza do módulo e terminar
	2) invocar Y/Z para tratar comando
	3) esperar Y/Z terminar processamento
	4) voltar para 1)
	
Atividades de Y/Z:
	1) ler mensagem inicial (ou original) escrita por X na memória
	2) formatar a requisicao (comando + mensagem)
	3) enviar requisicao para o módulo
	4) ler resultado do módulo
	5) requisitar e garantir limpeza do módulo
	5) escrever resultado parcial na memória
	7) chamar processo X

Atividades do módulo:
	1) receber requisicao
	2) processar requisicao
	3) salvar resultado na saída do módulo
		
Pode-se perceber que os processos Y e Z só podem executar com um intervalo
de um processo X entre eles.
A cada uso do recurso compartilhado entre Y e Z (módulo), a limpeza do mesmo
deve ser feita.
Os seguintes comandos são de responsabilidade de Y (m deve ser substituído
pela mensagem):
	Y-s*m*: mensagem m deve ter todos os espacos em branco substituidos por "/".
	Y-3*m*: mensagem m deve ter todo os "e"s substituidos por "3"  
Os seguintes comandos são de responsabilidade de Z:
	Z-r*m*: mensagem m deve ser invertida
	Z-h*m*: mensagem m deve ter todo os numeros "0" substituidos por "0x00"
O processo X só pode terminar quando todos os comandos forem processados.
Os comandos devem ser separados por "\n"e não pode haver dois comandos seguidos
para o mesmo processo (e.g. "Z\nZ"). Exemplo válido:
"Z-r*m*
Y-s*m*"
Exemplo inválido:
"Z-r*m*
Z-h*m*""
O comando para limpeza do módulo é:
mod-clear

Escreva os códigos para o módo de usuário e modo kernel do problema acima.

Exemplo de arquivos e comandos:
a) o arquivo "orig_msg.txt" contem as mensagens originais separadas
por linha ("\n"), por exemplo
"isso eh uma mensagem
isso eh outra mensagem0"

b) o arquivo "cripto.txt" deve conter os comandos separados por linha,
por exemplo
"Y-s*m*
Z-h*m*"

c) o arquivio "rslt.txt" deveria ter algo do tipo
"isso/eh/uma/mensagem
isso eh outra mensagem0x00"

d) Os comandos passados para o módulo seriam algo do tipo
"isso eh uma mensagem Y-s*m*"
"isso eh outra mensagem0 Z-h*m*"

Observação: os processos X, Y e Z devem que ser threads temporárias criadas por
um processo pai, ou seja, elas são criadas para executarem suas atividades e
devem terminar para uma próxima iteração de atividades.

Observação 2: Modificar o código do seguinte link para ser usado nessa questão
https://appusajeev.wordpress.com/2011/06/18/writing-a-linux-character-device-driver/


  
